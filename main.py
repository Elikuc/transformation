import logging
import asyncio
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import TOKEN
from payment import create, check

logging.basicConfig(level=logging.INFO)

bot = Bot(TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –°—Å—ã–ª–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
TARIFF_LINKS = {
    'try': "https://t.me/+q3hQOd6UmfNlMDgy",
    'basic': "https://t.me/+cDkzwHwOBPtkYmUy",
    'vip': "https://t.me/+d8X2G0TSxHY0ZWNi"
}


@router.message(Command(commands=['start']))
async def start_handler(message: Message):
    logging.info(f"Received /start command from user {message.from_user.id}")
    try:
        await message.answer(
            '–ü—Ä–∏–≤–µ—Çü©∑ –Ø —Ä–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å –∑–¥–µ—Å—å, –Ω–∞ –ø—É—Ç–∏ –∫ –ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—é!) '
            '–ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–µ–π —Å–µ–±—è –∏ –Ω–∞—É—á–∏—Ç—å—Å—è –∫—Ä–∞—Å–∏–≤–æ —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å, —è –ø—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–±–µ –Ω–∏–∂–µ –≤—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è‚ú® '
            '–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ üíñ¬´–ü–†–ï–í–†–ê–©–ï–ù–ò–ò¬ª!üíñ',
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(text="–¢–∞—Ä–∏—Ñ ¬´–Ø –ø–æ–ø—Ä–æ–±—É—é¬ª", callback_data="choose_try"),
                        types.InlineKeyboardButton(text="–¢–∞—Ä–∏—Ñ ¬´–ë–∞–∑–æ–≤—ã–π¬ª", callback_data="choose_basic"),
                        types.InlineKeyboardButton(text="–¢–∞—Ä–∏—Ñ ¬´VIP¬ª", callback_data="choose_vip")
                    ]
                ]
            )
        )
    except Exception as e:
        logging.error(f"Error in start_handler: {e}")


@router.callback_query(lambda c: c.data.startswith('choose_'))
async def choose_tariff_handler(callback: types.CallbackQuery):
    logging.info(f"Received tariff choice: {callback.data} from user {callback.from_user.id}")
    try:
        tariff_mapping = {
            'choose_try': ('try', 1),
            'choose_basic': ('basic', 5990),
            'choose_vip': ('vip', 7990)
        }
        tariff_key, tariff_price = tariff_mapping.get(callback.data, (None, None))
        if tariff_key is None:
            logging.error(f"Invalid tariff key: {callback.data}")
            return

        payment_url, payment_id = create(tariff_price, callback.message.chat.id)

        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text='–û–ø–ª–∞—Ç–∏—Ç—å',
            url=payment_url
        ))
        builder.add(types.InlineKeyboardButton(
            text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É',
            callback_data=f'check_{payment_id}_{tariff_key}'
        ))

        await callback.message.answer(
            f"–°—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω! –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞: {tariff_price} ‚ÇΩ",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logging.error(f"Error in choose_tariff_handler: {e}")
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
    finally:
        await callback.answer()


@router.callback_query(lambda c: 'check' in c.data)
async def check_handler(callback: types.CallbackQuery):
    logging.info(f"Received check payment request: {callback.data} from user {callback.from_user.id}")
    payment_id, tariff_key = callback.data.split('_')[1:]
    result = check(payment_id)
    if result:
        await callback.message.answer(f'–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞: {TARIFF_LINKS[tariff_key]}')
    else:
        await callback.message.answer('–û–ø–ª–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞')
    await callback.answer()


async def main():
    logging.info("Starting bot polling...")
    await dp.start_polling(bot, skip_updates=False)


if __name__ == '__main__':
    asyncio.run(main())
